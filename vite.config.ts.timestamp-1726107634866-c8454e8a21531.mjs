// vite.config.ts
import { defineConfig, loadEnv } from "file:///C:/Users/kbgb8/%EB%AC%B8%EC%84%9C/GitHub/dohunrogue/node_modules/vite/dist/node/index.js";
import tsconfigPaths from "file:///C:/Users/kbgb8/%EB%AC%B8%EC%84%9C/GitHub/dohunrogue/node_modules/vite-tsconfig-paths/dist/index.mjs";

// src/plugins/vite/vite-minify-json-plugin.ts
import path from "path";
import fs from "fs";
function applyToDir(dir, recursive) {
  const files = fs.readdirSync(dir).filter((file) => !/^\..*/.test(file));
  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.lstatSync(filePath);
    if (stat.isDirectory() && recursive) {
      applyToDir(filePath, recursive);
    } else if (path.extname(file) === ".json") {
      const contents = fs.readFileSync(filePath, "utf8");
      const minifiedContent = JSON.stringify(JSON.parse(contents));
      fs.writeFileSync(filePath, minifiedContent, "utf8");
    }
  }
}
function minifyJsonPlugin(basePath, recursive) {
  let buildDir = "dist";
  return {
    name: "flx-minify-json",
    apply: "build",
    configResolved(config) {
      buildDir = config.build.outDir;
    },
    async closeBundle() {
      console.log("Minifying JSON files...");
      const basePathes = Array.isArray(basePath) ? basePath : [basePath];
      basePathes.forEach((basePath2) => {
        const baseDir = path.resolve(buildDir, basePath2);
        if (fs.existsSync(baseDir)) {
          applyToDir(baseDir, recursive);
        } else {
          console.error(`Path ${baseDir} does not exist!`);
        }
      });
      console.log("Finished minifying JSON files!");
    }
  };
}

// vite.config.ts
var defaultConfig = {
  plugins: [
    tsconfigPaths(),
    minifyJsonPlugin(["images", "battle-anims"], true)
  ],
  clearScreen: false,
  appType: "mpa",
  build: {
    minify: "esbuild",
    sourcemap: false,
    rollupOptions: {
      onwarn(warning, defaultHandler) {
        if (warning.code === "MODULE_LEVEL_DIRECTIVE") {
          return;
        }
        defaultHandler(warning);
      }
    }
  }
};
var vite_config_default = defineConfig(({ mode }) => {
  const envPort = Number(loadEnv(mode, process.cwd()).VITE_PORT);
  return {
    ...defaultConfig,
    esbuild: {
      pure: mode === "production" ? ["console.log"] : [],
      keepNames: true
    },
    server: {
      port: !isNaN(envPort) ? envPort : 8e3
    }
  };
});
export {
  vite_config_default as default,
  defaultConfig
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAic3JjL3BsdWdpbnMvdml0ZS92aXRlLW1pbmlmeS1qc29uLXBsdWdpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2Rpcm5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGtiZ2I4XFxcXFx1QkIzOFx1QzExQ1xcXFxHaXRIdWJcXFxcZG9odW5yb2d1ZVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxca2JnYjhcXFxcXHVCQjM4XHVDMTFDXFxcXEdpdEh1YlxcXFxkb2h1bnJvZ3VlXFxcXHZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy9rYmdiOC8lRUIlQUMlQjglRUMlODQlOUMvR2l0SHViL2RvaHVucm9ndWUvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIGxvYWRFbnYsIFJvbGx1cCwgVXNlckNvbmZpZyB9IGZyb20gJ3ZpdGUnO1xyXG5pbXBvcnQgdHNjb25maWdQYXRocyBmcm9tICd2aXRlLXRzY29uZmlnLXBhdGhzJztcclxuaW1wb3J0IHsgbWluaWZ5SnNvblBsdWdpbiB9IGZyb20gXCIuL3NyYy9wbHVnaW5zL3ZpdGUvdml0ZS1taW5pZnktanNvbi1wbHVnaW5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29uZmlnOiBVc2VyQ29uZmlnICA9IHtcclxuXHRwbHVnaW5zOiBbXHJcblx0XHR0c2NvbmZpZ1BhdGhzKCksIFxyXG5cdFx0bWluaWZ5SnNvblBsdWdpbihbXCJpbWFnZXNcIiwgXCJiYXR0bGUtYW5pbXNcIl0sIHRydWUpXHJcblx0XSxcclxuXHRjbGVhclNjcmVlbjogZmFsc2UsXHJcblx0YXBwVHlwZTogXCJtcGFcIixcclxuXHRidWlsZDoge1xyXG5cdFx0bWluaWZ5OiAnZXNidWlsZCcsXHJcblx0XHRzb3VyY2VtYXA6IGZhbHNlLFxyXG5cdFx0cm9sbHVwT3B0aW9uczoge1xyXG5cdFx0XHRvbndhcm4od2FybmluZzogUm9sbHVwLlJvbGx1cExvZywgZGVmYXVsdEhhbmRsZXI6ICh3YXJuaW5nOiBzdHJpbmcgfCBSb2xsdXAuUm9sbHVwTG9nKSA9PiB2b2lkKSB7XHJcblx0XHRcdFx0Ly8gU3VwcHJlc3MgXCJNb2R1bGUgbGV2ZWwgZGlyZWN0aXZlcyBjYXVzZSBlcnJvcnMgd2hlbiBidW5kbGVkXCIgd2FybmluZ3NcclxuXHRcdFx0XHRpZiAod2FybmluZy5jb2RlID09PSBcIk1PRFVMRV9MRVZFTF9ESVJFQ1RJVkVcIikge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkZWZhdWx0SGFuZGxlcih3YXJuaW5nKTtcclxuXHRcdFx0fSxcclxuXHRcdH0sXHJcblx0fSxcclxufTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHttb2RlfSkgPT4ge1xyXG5cdGNvbnN0IGVudlBvcnQgPSBOdW1iZXIobG9hZEVudihtb2RlLCBwcm9jZXNzLmN3ZCgpKS5WSVRFX1BPUlQpO1xyXG5cclxuXHRyZXR1cm4gKHtcclxuXHRcdC4uLmRlZmF1bHRDb25maWcsXHJcblx0XHRlc2J1aWxkOiB7XHJcblx0XHRcdHB1cmU6IG1vZGUgPT09ICdwcm9kdWN0aW9uJyA/IFsnY29uc29sZS5sb2cnXSA6IFtdLFxyXG5cdFx0XHRrZWVwTmFtZXM6IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0c2VydmVyOiB7XHJcblx0XHRcdHBvcnQ6ICFpc05hTihlbnZQb3J0KSA/IGVudlBvcnQgOiA4MDAwLFxyXG5cdFx0fVxyXG5cdH0pO1xyXG59KTtcclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxrYmdiOFxcXFxcdUJCMzhcdUMxMUNcXFxcR2l0SHViXFxcXGRvaHVucm9ndWVcXFxcc3JjXFxcXHBsdWdpbnNcXFxcdml0ZVwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcVXNlcnNcXFxca2JnYjhcXFxcXHVCQjM4XHVDMTFDXFxcXEdpdEh1YlxcXFxkb2h1bnJvZ3VlXFxcXHNyY1xcXFxwbHVnaW5zXFxcXHZpdGVcXFxcdml0ZS1taW5pZnktanNvbi1wbHVnaW4udHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L1VzZXJzL2tiZ2I4LyVFQiVBQyVCOCVFQyU4NCU5Qy9HaXRIdWIvZG9odW5yb2d1ZS9zcmMvcGx1Z2lucy92aXRlL3ZpdGUtbWluaWZ5LWpzb24tcGx1Z2luLnRzXCI7aW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgeyB0eXBlIFBsdWdpbiBhcyBWaXRlUGx1Z2luIH0gZnJvbSBcInZpdGVcIjtcclxuXHJcbi8qKlxyXG4gKiBDcmF3bCBhIGRpcmVjdG9yeSAocmVjdXJzaXZlbHkgaWYgd2FudGVkKSBmb3IganNvbiBmaWxlcyBhbmQgbWluaWZpZXMgZm91bmQgb25lcy5cclxuICogQHBhcmFtIGRpciB0aGUgZGlyZWN0b3J5IHRvIGNyYXdsXHJcbiAqIEBwYXJhbSByZWN1cnNpdmUgaWYgdHJ1ZSwgd2lsbCBjcmF3bCBzdWJkaXJlY3Rvcmllc1xyXG4gKi9cclxuZnVuY3Rpb24gYXBwbHlUb0RpcihkaXI6IHN0cmluZywgcmVjdXJzaXZlPzogYm9vbGVhbikge1xyXG4gIGNvbnN0IGZpbGVzID0gZnMucmVhZGRpclN5bmMoZGlyKS5maWx0ZXIoKGZpbGUpID0+ICEvXlxcLi4qLy50ZXN0KGZpbGUpKTtcclxuXHJcbiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihkaXIsIGZpbGUpO1xyXG4gICAgY29uc3Qgc3RhdCA9IGZzLmxzdGF0U3luYyhmaWxlUGF0aCk7XHJcblxyXG4gICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSAmJiByZWN1cnNpdmUpIHtcclxuICAgICAgYXBwbHlUb0RpcihmaWxlUGF0aCwgcmVjdXJzaXZlKTsgLy8gb25seSBpZiByZWN1cnNpdmUgaXMgdHJ1ZVxyXG4gICAgfSBlbHNlIGlmIChwYXRoLmV4dG5hbWUoZmlsZSkgPT09IFwiLmpzb25cIikge1xyXG4gICAgICBjb25zdCBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCwgXCJ1dGY4XCIpO1xyXG4gICAgICBjb25zdCBtaW5pZmllZENvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShKU09OLnBhcnNlKGNvbnRlbnRzKSk7XHJcblxyXG4gICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBtaW5pZmllZENvbnRlbnQsIFwidXRmOFwiKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQbHVnaW4gdG8gbW5pZnkganNvbiBmaWxlcyBpbiB0aGUgYnVpbGQgZm9sZGVyIGFmdGVyIHRoZSBidW5kbGluZyBpcyBkb25lLlxyXG4gKiBAcGFyYW0gYmFzZVBhdGggYmFzZSBwYXRoL2VzIHN0YXJ0aW5nIGluc2lkZSB0aGUgYnVpbGQgZGlyIChlLmcuIHdpbGwgYWx3YXlzIHN0YXJ0IHdpdGggXCIvZGlzdFwiIGlmIGRpc3QgaXMgdGhlIGJ1aWxkIGRpcilcclxuICogQHBhcmFtIHJlY3Vyc2l2ZSBpZiB0cnVlLCB3aWxsIGNyYXdsIHN1YmRpcmVjdG9yaWVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWluaWZ5SnNvblBsdWdpbihiYXNlUGF0aDogc3RyaW5nIHwgc3RyaW5nW10sIHJlY3Vyc2l2ZT86IGJvb2xlYW4pOiBWaXRlUGx1Z2luIHtcclxuICBsZXQgYnVpbGREaXIgPSBcImRpc3RcIjsgLy8gRGVmYXVsdCBidWlsZCBkaXJcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6IFwiZmx4LW1pbmlmeS1qc29uXCIsXHJcbiAgICBhcHBseTogXCJidWlsZFwiLFxyXG4gICAgY29uZmlnUmVzb2x2ZWQoY29uZmlnKSB7XHJcbiAgICAgIGJ1aWxkRGlyID0gY29uZmlnLmJ1aWxkLm91dERpcjsgLy8gUmVhZCB0aGUgYnVpbGQgb3V0cHV0IGRpcmVjdG9yeSBmcm9tIFZpdGUgY29uZmlnXHJcbiAgICB9LFxyXG4gICAgYXN5bmMgY2xvc2VCdW5kbGUoKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiTWluaWZ5aW5nIEpTT04gZmlsZXMuLi5cIik7XHJcbiAgICAgIGNvbnN0IGJhc2VQYXRoZXMgPSBBcnJheS5pc0FycmF5KGJhc2VQYXRoKSA/IGJhc2VQYXRoIDogW2Jhc2VQYXRoXTtcclxuXHJcbiAgICAgIGJhc2VQYXRoZXMuZm9yRWFjaCgoYmFzZVBhdGgpID0+IHtcclxuICAgICAgICBjb25zdCBiYXNlRGlyID0gcGF0aC5yZXNvbHZlKGJ1aWxkRGlyLCBiYXNlUGF0aCk7XHJcbiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMoYmFzZURpcikpIHtcclxuICAgICAgICAgIGFwcGx5VG9EaXIoYmFzZURpciwgcmVjdXJzaXZlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihgUGF0aCAke2Jhc2VEaXJ9IGRvZXMgbm90IGV4aXN0IWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRmluaXNoZWQgbWluaWZ5aW5nIEpTT04gZmlsZXMhXCIpO1xyXG4gICAgfSxcclxuICB9O1xyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBdVQsU0FBUyxjQUFjLGVBQW1DO0FBQ2pYLE9BQU8sbUJBQW1COzs7QUNEOFcsT0FBTyxVQUFVO0FBQ3paLE9BQU8sUUFBUTtBQVFmLFNBQVMsV0FBVyxLQUFhLFdBQXFCO0FBQ3BELFFBQU0sUUFBUSxHQUFHLFlBQVksR0FBRyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztBQUV0RSxhQUFXLFFBQVEsT0FBTztBQUN4QixVQUFNLFdBQVcsS0FBSyxLQUFLLEtBQUssSUFBSTtBQUNwQyxVQUFNLE9BQU8sR0FBRyxVQUFVLFFBQVE7QUFFbEMsUUFBSSxLQUFLLFlBQVksS0FBSyxXQUFXO0FBQ25DLGlCQUFXLFVBQVUsU0FBUztBQUFBLElBQ2hDLFdBQVcsS0FBSyxRQUFRLElBQUksTUFBTSxTQUFTO0FBQ3pDLFlBQU0sV0FBVyxHQUFHLGFBQWEsVUFBVSxNQUFNO0FBQ2pELFlBQU0sa0JBQWtCLEtBQUssVUFBVSxLQUFLLE1BQU0sUUFBUSxDQUFDO0FBRTNELFNBQUcsY0FBYyxVQUFVLGlCQUFpQixNQUFNO0FBQUEsSUFDcEQ7QUFBQSxFQUNGO0FBQ0Y7QUFPTyxTQUFTLGlCQUFpQixVQUE2QixXQUFpQztBQUM3RixNQUFJLFdBQVc7QUFFZixTQUFPO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixPQUFPO0FBQUEsSUFDUCxlQUFlLFFBQVE7QUFDckIsaUJBQVcsT0FBTyxNQUFNO0FBQUEsSUFDMUI7QUFBQSxJQUNBLE1BQU0sY0FBYztBQUNsQixjQUFRLElBQUkseUJBQXlCO0FBQ3JDLFlBQU0sYUFBYSxNQUFNLFFBQVEsUUFBUSxJQUFJLFdBQVcsQ0FBQyxRQUFRO0FBRWpFLGlCQUFXLFFBQVEsQ0FBQ0EsY0FBYTtBQUMvQixjQUFNLFVBQVUsS0FBSyxRQUFRLFVBQVVBLFNBQVE7QUFDL0MsWUFBSSxHQUFHLFdBQVcsT0FBTyxHQUFHO0FBQzFCLHFCQUFXLFNBQVMsU0FBUztBQUFBLFFBQy9CLE9BQU87QUFDTCxrQkFBUSxNQUFNLFFBQVEsT0FBTyxrQkFBa0I7QUFBQSxRQUNqRDtBQUFBLE1BQ0YsQ0FBQztBQUNELGNBQVEsSUFBSSxnQ0FBZ0M7QUFBQSxJQUM5QztBQUFBLEVBQ0Y7QUFDRjs7O0FEcERPLElBQU0sZ0JBQTZCO0FBQUEsRUFDekMsU0FBUztBQUFBLElBQ1IsY0FBYztBQUFBLElBQ2QsaUJBQWlCLENBQUMsVUFBVSxjQUFjLEdBQUcsSUFBSTtBQUFBLEVBQ2xEO0FBQUEsRUFDQSxhQUFhO0FBQUEsRUFDYixTQUFTO0FBQUEsRUFDVCxPQUFPO0FBQUEsSUFDTixRQUFRO0FBQUEsSUFDUixXQUFXO0FBQUEsSUFDWCxlQUFlO0FBQUEsTUFDZCxPQUFPLFNBQTJCLGdCQUE4RDtBQUUvRixZQUFJLFFBQVEsU0FBUywwQkFBMEI7QUFDOUM7QUFBQSxRQUNEO0FBQ0EsdUJBQWUsT0FBTztBQUFBLE1BQ3ZCO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFDRDtBQUdBLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUMsS0FBSSxNQUFNO0FBQ3ZDLFFBQU0sVUFBVSxPQUFPLFFBQVEsTUFBTSxRQUFRLElBQUksQ0FBQyxFQUFFLFNBQVM7QUFFN0QsU0FBUTtBQUFBLElBQ1AsR0FBRztBQUFBLElBQ0gsU0FBUztBQUFBLE1BQ1IsTUFBTSxTQUFTLGVBQWUsQ0FBQyxhQUFhLElBQUksQ0FBQztBQUFBLE1BQ2pELFdBQVc7QUFBQSxJQUNaO0FBQUEsSUFDQSxRQUFRO0FBQUEsTUFDUCxNQUFNLENBQUMsTUFBTSxPQUFPLElBQUksVUFBVTtBQUFBLElBQ25DO0FBQUEsRUFDRDtBQUNELENBQUM7IiwKICAibmFtZXMiOiBbImJhc2VQYXRoIl0KfQo=
